name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GCP_REGISTRY_DOMAIN: ${{ secrets.GCP_REGISTRY_DOMAIN }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REPO_NAME: ${{ secrets.GCP_REPO_NAME }}
  # GCP_REGION: ${{ secrets.GCP_REGION }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Maven tests and package JARs
        run: |
          set -e
          for service in user-service recipe-service; do
            cd backend/$service
            mvn clean package -DskipTests=false
            echo "=== Listing JARs for $service ==="
            ls -lh target/*.jar || echo "‚ùå JAR not found for $service"
            cd ../../
          done

      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/main'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker to use Artifact Registry
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud auth configure-docker $GCP_REGISTRY_DOMAIN

      - name: Docker Build & Push (Backend)
        if: github.ref == 'refs/heads/main'
        run: |
          FULL_REPO="$GCP_REGISTRY_DOMAIN/$GCP_PROJECT_ID/$GCP_REPO_NAME"
          for service in user-service recipe-service; do
            cd backend/$service
            docker build -t $FULL_REPO/$service:$IMAGE_TAG .
            docker push $FULL_REPO/$service:$IMAGE_TAG
            cd ../../
          done

          docker build -t $FULL_REPO/frontend:$IMAGE_TAG -f Dockerfile.frontend .
          docker push $FULL_REPO/frontend:$IMAGE_TAG
